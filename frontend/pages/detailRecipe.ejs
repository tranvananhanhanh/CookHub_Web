<html>

<head>
  <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
  <link rel="stylesheet" as="style" onload="this.rel='stylesheet'"
    href="https://fonts.googleapis.com/css2?display=swap&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&amp;family=Plus+Jakarta+Sans%3Awght%40400%3B500%3B700%3B800" />

  <title>Detail Recipe Design</title>
  <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

  <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
  <!-- Font -->
  <script src="https://kit.fontawesome.com/da12da5f88.js" crossorigin="anonymous"></script>
  <!-- CSS -->
  <link rel="stylesheet" href="../assets/styles/styles.css">
  <link rel="stylesheet" href="../assets/styles/responsive.css">
  <!-- JavaScript -->
  <script src="../js/loadHTML.js" defer></script>

  <style>
    body {
      font-family: Arial, sans-serif;
      /* display: flex; */
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background-color: #f0f0f0;
      margin: 0;
    }

    .mt-67 {
      margin-top: 67px;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      width: 100%;
      max-width: 400px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .comment-form, .report-form {
      padding-top: 10px;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .comment-form textarea, .report-form textarea {
      width: 100%;
      height: 100px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      resize: none;
    }

    .modal-buttons {
        display: flex;
        gap: 10px; /* Kho·∫£ng c√°ch gi·ªØa c√°c n√∫t */
        margin-top: 10px; /* Kho·∫£ng c√°ch v·ªõi textarea */
    }

    .modal-buttons .submit-btn, .modal-buttons .cancel-btn {
        flex-grow: 1; /* ƒê·ªÉ c√°c n√∫t chi·∫øm kh√¥ng gian b·∫±ng nhau */
        padding: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        text-align: center;
    }

    .modal-buttons .submit-btn {
      background-color: #f4900d;
      color: white;
    }
    .modal-buttons .submit-btn:hover {
      background-color: #16140f;
    }

    .modal-buttons .cancel-btn {
        background-color: #e0e0e0; /* M√†u x√°m nh·∫°t cho n√∫t cancel */
        color: #333;
    }
    .modal-buttons .cancel-btn:hover {
        background-color: #bdbdbd; /* M√†u x√°m ƒë·∫≠m h∆°n khi hover */
    }

    /* .comment-form .submit-btn, .report-form .submit-btn {
      background-color: #f4900d;
      color: white;
      padding: 10px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }

    .comment-form .submit-btn:hover, .report-form .submit-btn:hover {
      background-color: #16140f;
    } */

    .message {
      color: red;
      margin-top: 10px;
      text-align: center;
    }
  </style>
</head>

<body>

  <!-- <div class="header"></div> -->

  <div class="relative flex size-full min-h-screen flex-col bg-[#FFFFFF] group/design-root overflow-x-hidden"
    style='--checkbox-tick-svg: url(&apos;data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27rgb(255,255,255)%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e&apos;); font-family: "Plus Jakarta Sans", "Noto Sans", sans-serif;'>
    <div class="layout-container flex h-full grow flex-col">
      <div class="header"></div>

      <div class="mt-67 px-40 flex flex-1 justify-center py-5">
        <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
          <div class="@container">
            <div class="@[480px]:px-4 @[480px]:py-3">

              <div id="recipe-thumbnail"
                class="bg-cover bg-center flex flex-col justify-end overflow-hidden bg-[#FFFFFF] @[480px]:rounded-xl min-h-80"
                style='background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0) 25%);
                  '>
                <div class="flex p-4">
                  <p id="recipe-title" class="text-white tracking-light text-[28px] font-bold leading-tight"></p>
                </div>
              </div>
            </div>
          </div>
          <div class="flex flex-wrap gap-4 px-4 py-2 py-2 justify-between">
            <div class="flex items-center justify-center gap-2 px-3 py-2">

              <div id="save-btn" class="text-[#A18249]" data-icon="File" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor"
                  viewBox="0 0 256 256">
                  <path
                    d="M213.66,82.34l-56-56A8,8,0,0,0,152,24H56A16,16,0,0,0,40,40V216a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V88A8,8,0,0,0,213.66,82.34ZM160,51.31,188.69,80H160ZM200,216H56V40h88V88a8,8,0,0,0,8,8h48V216Z">
                  </path>
                </svg>
              </div>
            </div>

            <!-- rating -->
            <div class="flex items-center justify-center gap-2 px-3 py-2 ">
              <div id="star" class="text-[#A18249]" data-icon="Star" data-size="24px" data-weight="regular">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor"
                  viewBox="0 0 256 256">
                  <path
                    d="M239.2,97.29a16,16,0,0,0-13.81-11L166,81.17,142.72,25.81h0a15.95,15.95,0,0,0-29.44,0L90.07,81.17,30.61,86.32a16,16,0,0,0-9.11,28.06L66.61,153.8,53.09,212.34a16,16,0,0,0,23.84,17.34l51-31,51.11,31a16,16,0,0,0,23.84-17.34l-13.51-58.6,45.1-39.36A16,16,0,0,0,239.2,97.29Zm-15.22,5-45.1,39.36a16,16,0,0,0-5.08,15.71L187.35,216v0l-51.07-31a15.9,15.9,0,0,0-16.54,0l-51,31h0L82.2,157.4a16,16,0,0,0-5.08-15.71L32,102.35a.37.37,0,0,1,0-.09l59.44-5.14a16,16,0,0,0,13.35-9.75L128,32.08l23.2,55.29a16,16,0,0,0,13.35,9.75L224,102.26S224,102.32,224,102.33Z">
                  </path>
                </svg>
              </div>
              <p class="text-[#A18249] text-[13px] font-bold leading-normal tracking-[0.015em]" id="recipe-rating"> </p>
            </div>
            <!-- Th√™m v√†o ph·∫ßn <style> -->
            <style>
              .star-rating {
                display: flex;
                gap: 5px;
                cursor: pointer;
              }

              .star {
                font-size: 24px;
                color: #ccc;
                transition: color 0.2s ease;
              }

              .star.filled {
                color: #f1c40f;
              }
            </style>


        <div class="flex items-center justify-center gap-2 px-3 py-2">
          <div id="report-recipe-btn" class="text-[#A18249] cursor-pointer" data-icon="Flag" data-size="24px" data-weight="regular">
            <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" fill="currentColor" viewBox="0 0 256 256">
              <path d="M216,32H56A24,24,0,0,0,32,56V216a8,8,0,0,0,16,0V56a8,8,0,0,1,8-8H216a8,8,0,0,0,0-16Z M160,56H56a8,8,0,0,0-8,8v88a8,8,0,0,0,16,0V111.44l12.12,7.27a8,8,0,0,0,8.07-.17L108,106.67l19.76,11.85a8,8,0,0,0,8.1.1l20.28-12.17,11.46,6.88A8,8,0,0,0,180,112V64A8,8,0,0,0,172,56H160Z"></path>
            </svg>
          </div>
        </div>
          </div>
          <p class="text-[#1C160C] text-base font-normal leading-normal pb-3 pt-1 px-4" id="recipe-description">

          </p>

          <h2
            class="text-[#1C160C] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5 mb-6 text-center">
            üßÇ Ingredients
          </h2>
          <div id="ingredient-list" class="p-4 grid grid-cols-[20%_1fr] gap-x-6">

          </div>
          <h2 class="text-[#1C160C] text-[22px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">Instructions
          </h2>
          <div id="instruction-list" class="space-y-4">
            <!-- C√°c b∆∞·ªõc n·∫•u ƒÉn s·∫Ω ƒë∆∞·ª£c JS render v√†o ƒë√¢y -->
          </div>


          <div class="flex px-4 py-3 justify-center">

            <button id="open-comment-form" onclick="toggleCommentForm()"
              class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-10 px-4 bg-[#FFA500] text-[#FFFFFF] text-sm font-bold leading-normal tracking-[0.015em]">
              <span class="truncate">Comment</span>
            </button>


            <div id="commentModal" class="modal">
              <div class="modal-content">
                <h2>Enter your comment</h2>
                <form class="comment-form" id="commentForm">
                  <textarea id="commentContent" placeholder="Enter here..." required></textarea>
                  <div class="modal-buttons"> <!-- B·ªçc c√°c n√∫t l·∫°i -->
                    <button type="button" id="cancelCommentBtn" class="cancel-btn">Cancel</button> 
                    <button type="submit" class="submit-btn">Send</button>
                  </div>
                  <!-- <button type="submit" class="submit-btn">Send</button> -->
                </form>
                <p id="message" class="message"></p>
              </div>
            </div>

            <div id="reportModal" class="modal">
              <div class="modal-content">
                <h2>Report this Recipe</h2>
                <form class="report-form" id="reportForm">
                  <textarea id="reportReason" name="reportReason" placeholder="Please provide a reason for reporting..." required></textarea>
                  <div class="modal-buttons"> <!-- B·ªçc c√°c n√∫t l·∫°i -->
                    <button type="button" id="cancelReportBtn" class="cancel-btn">Cancel</button> 
                    <button type="submit" class="submit-btn">Send</button>
                  </div>
                  <!-- <button type="submit" class="submit-btn">Submit Report</button> -->
                </form>
                <p id="reportMessage" class="message"></p>
              </div>
            </div>


          </div>


          <!-- Container hi·ªÉn th·ªã c√°c b√¨nh lu·∫≠n -->
          <div id="comment-container" class="mt-4">

          </div>
        </div>
        <div class="recipe-info">
          <h2 class="text-[#1C160C] text-[26px] font-bold leading-tight tracking-[-0.015em] px-4 pb-3 pt-5">From Chef
          </h2>

          <div class="px-4 pb-5 space-y-2 text-[18px] text-[#1C160C] font-medium">
            <div class="flex items-center gap-2">
              <span>üë®‚Äçüç≥</span>
              <span id="recipe-author">Chef Name</span>
            </div>
            <div class="flex items-center gap-2">
              <span>üçΩÔ∏è</span>
              <span id="recipe-serving">Serving for ... people</span>
            </div>
            <div class="flex items-center gap-2">
              <span>‚è±Ô∏è</span>
              <span id="recipe-time">Loading...</span>
            </div>
          </div>
        </div>

      </div>

      <div class="footer"></div>
    </div>
  </div>

  <script>
    // truy·ªÅn v√†o tham s·ªë 
    // Get recipeId from URL query parameters
    const urlParams = new URLSearchParams(window.location.search);

    const recipeId = urlParams.get('recipe_id');
    const userId = urlParams.get('userId');
    console.log(recipeId,userId);

    // H√†m hi·ªÉn th·ªã 5 ng√¥i sao khi nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng star
    function displayStarRating() {
      const starContainer = document.getElementById('star');
      starContainer.innerHTML = ''; // X√≥a bi·ªÉu t∆∞·ª£ng ng√¥i sao ban ƒë·∫ßu
      starContainer.classList.add('star-rating'); // Th√™m class ƒë·ªÉ ƒë·ªãnh d·∫°ng flex

      // T·∫°o 5 ng√¥i sao
      for (let i = 1; i <= 5; i++) {
        const star = document.createElement('span');
        star.className = 'star';
        star.innerHTML = '‚òÖ'; // K√Ω t·ª± ng√¥i sao
        star.dataset.value = i; // L∆∞u gi√° tr·ªã sao (1-5)
        star.addEventListener('click', () => selectStar(i)); // G·∫Øn s·ª± ki·ªán ch·ªçn sao
        star.addEventListener('mouseover', () => highlightStars(i)); // G·∫Øn s·ª± ki·ªán hover
        star.addEventListener('mouseout', restoreStars); // G·∫Øn s·ª± ki·ªán mouseout
        starContainer.appendChild(star);
      }
    }

    // H√†m highlight c√°c ng√¥i sao t·ª´ 1 ƒë·∫øn rating khi hover
    function highlightStars(rating) {
      const stars = document.querySelectorAll('#star .star');
      stars.forEach(star => {
        if (parseInt(star.dataset.value) <= rating) {
          star.classList.add('filled');
        } else {
          star.classList.remove('filled');
        }
      });
    }

    // H√†m kh√¥i ph·ª•c tr·∫°ng th√°i ng√¥i sao khi chu·ªôt r·ªùi ƒëi
    function restoreStars() {
      const currentRating = parseInt(document.getElementById('recipe-rating').innerText.split(' ')[0]) || 0;
      const stars = document.querySelectorAll('#star .star');
      stars.forEach(star => {
        if (parseInt(star.dataset.value) <= currentRating) {
          star.classList.add('filled');
        } else {
          star.classList.remove('filled');
        }
      });
    }

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn s·ªë sao
    function selectStar(rating) {
      const stars = document.querySelectorAll('#star .star');
      stars.forEach(star => {
        if (parseInt(star.dataset.value) <= rating) {
          star.classList.add('filled'); // Highlight c√°c ng√¥i sao t·ª´ 1 ƒë·∫øn rating
        } else {
          star.classList.remove('filled'); // B·ªè highlight c√°c ng√¥i sao c√≤n l·∫°i
        }
      });
      // C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë sao ƒë√£ ch·ªçn
      document.getElementById('recipe-rating').innerText = `${rating} sao`;
      console.log(rating);

      // G·ª≠i s·ªë sao v·ªÅ database
      submitRating(rating, recipeId, userId);
    }

    // H√†m g·ª≠i s·ªë sao v·ªÅ database
    async function submitRating(rating, recipeId, userId) {
      try {
        const response = await fetch('http://localhost:4000/detailrecipe/rating', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            recipe_id: parseInt(recipeId,10),
            user_id: parseInt(userId,10),
            rating: parseInt(rating,10)
          }),
        });

        if (response.ok) {
          console.log(`ƒê√£ g·ª≠i ƒë√°nh gi√° ${rating} sao th√†nh c√¥ng!`);
          alert(`ƒê√£ g·ª≠i ƒë√°nh gi√° ${rating} sao!`);
        } else {
          const errorData = await response.json();
          if (response.status === 400) {
            alert('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!');
          } else if (response.status === 401) {
            alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°!');
          } else {
            alert(errorData.error || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!');
          }
        }
      } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi:', error);
        alert('L·ªói k·∫øt n·ªëi, vui l√≤ng th·ª≠ l·∫°i!');
      }
    }

    // G·∫Øn s·ª± ki·ªán click cho bi·ªÉu t∆∞·ª£ng ng√¥i sao ban ƒë·∫ßu
    document.getElementById('star').addEventListener('click', displayStarRating);

    // h√†m hi·ªÉn th·ªã chi ti·∫øt li√™n quan ƒë·∫øn c√¥ng th·ª©c
    async function fetchAndDisplayRecipe(recipeId, userId) {
      try {
        const response = await fetch(`/detailrecipe/${recipeId}`, {
          mode: "cors",
          credentials: "same-origin",
          headers: { "Accept": "application/json" }
        });
        const data = await response.json();
        const recipe = data;
        console.log(recipe);
        // ph·∫ßn ƒë·ªÉ hi·ªÉn th·ªã comment
        const container = document.getElementById("comment-container");
        // Hi·ªÉn th·ªã th√¥ng tin chung
        //·∫£nh chung m√≥n ƒÉn
        const thumbnailDiv = document.getElementById("recipe-thumbnail");
        const imageUrl = `../assets/image/recipes/${recipeId}/${recipe.thumbnail}`;
        thumbnailDiv.style.backgroundImage = `
              url("${imageUrl}")
            `;
        document.getElementById("recipe-title").innerText = recipe.title;

        document.getElementById("recipe-description").innerText = recipe.description;
        document.getElementById("recipe-rating").innerText = recipe.total_ratings;
        document.querySelector("#recipe-serving").textContent = ` ${recipe.servings}`;
        document.querySelector("#recipe-author").textContent = ` ${recipe.author_name}`;
        document.querySelector("#recipe-time").textContent = `${recipe.cooking_time} ph√∫t`;
        // h√†m hi·ªÉn th·ªã nguy√™n li·ªáu 
        function displayIngredients(ingredients) {
          const container = document.getElementById("ingredient-list");
          container.innerHTML = ""; // X√≥a n·ªôi dung c≈©

          // Thi·∫øt l·∫≠p l∆∞·ªõi 2 c·ªôt
          container.className = "grid grid-cols-2 gap-x-7 gap-y-3";

          ingredients.forEach(ingredient => {
            const ingredientHTML = `
                <div class="flex justify-between items-center border-t border-t-[#E9DFCE] pt-3">
                  <span class="text-[#A18249] text-sm font-normal mr-5">${ingredient.ingredient_name}</span>
                  <span class="text-[#1C160C] text-sm font-normal">${ingredient.amount} ${ingredient.unit_name}</span>
                </div>
              `;
            container.insertAdjacentHTML("beforeend", ingredientHTML);
          });
        }
        // g·ªçi h√†m hi·ªÉn th·ªã nguy√™n li·ªáu m√≥n ƒÉn
        displayIngredients(recipe.ingredients);

function displayInstructions(recipe) {
  const container = document.getElementById("instruction-list");
  if (!container) {
    console.error("Container #instruction-list not found");
    return;
  }
  container.innerHTML = ""; // X√≥a n·ªôi dung c≈©

  const recipeId = recipe?.recipe_id;
  if (!recipeId) {
    console.error("Recipe ID is undefined");
    return;
  }

  const steps = recipe.steps || [];
  const images = recipe.images || [];

  // T·∫°o modal th√¥ng b√°o
  const modal = document.createElement("div");
  modal.id = "completion-modal";
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  `;

  const modalContent = document.createElement("div");
  modalContent.style.cssText = `
    background: #FFFFFF;
    padding: 20px;
    border-radius: 8px;
    text-align: center;
    max-width: 400px;
    width: 90%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  `;

  const modalMessage = document.createElement("p");
  modalMessage.textContent = "üéâCh√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh m√≥n ƒÉn. H√£y th∆∞·ªüng th·ª©c n√≥ nh√©!";
  modalMessage.style.cssText = `
    font-size: 18px;
    color: #1C160C;
    margin-bottom: 20px;
  `;

  const closeButton = document.createElement("button");
  closeButton.textContent = "Close";
  closeButton.style.cssText = `
    background: #FF8C00;
    color: #FFFFFF;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
  `;
  closeButton.onclick = () => {
    modal.style.display = "none";
  };

  modalContent.append(modalMessage, closeButton);
  modal.appendChild(modalContent);
  document.body.appendChild(modal);

  steps.forEach((step, index) => {
    // T·∫°o HTML c∆° b·∫£n cho b∆∞·ªõc
    const stepContainer = document.createElement("div");
    stepContainer.className = "flex gap-4 bg-[#FFFFFF] px-4 py-3 justify-between";

    stepContainer.innerHTML = `
      <div class="flex items-start gap-4">
        <div class="text-[#1C160C] flex items-center justify-center rounded-lg bg-[#F4EFE6] shrink-0 size-12">
          <span class="text-lg font-bold">${index + 1}</span>
        </div>
        <div class="flex flex-1 flex-col justify-center">
          <p class="text-[#1C160C] text-left text-base font-medium leading-normal">Step ${index + 1}</p>
          <p class="text-[#A18249] text-left text-sm font-normal leading-normal">
            ${step.description.replace(/\\n/g, '<br>')}
          </p>
          <div class="step-images flex gap-2 mt-2 flex-wrap"></div>
        </div>
      </div>
      <div class="shrink-0">
        <div class="flex size-7 items-center justify-center">
          <input type="checkbox"
            class="h-5 w-5 rounded border-[#E9DFCE] border-2 bg-transparent text-[#FF8C00] checked:bg-[#FF8C00] checked:border-[#FF8C00] focus:ring-0 focus:ring-offset-0 focus:border-[#E9DFCE] focus:outline-none"
            data-step="${index + 1}"
          />
        </div>
      </div>
    `;

    // Th√™m ·∫£nh t·ª´ m·∫£ng images to√†n c·ª•c
    const imagesContainer = stepContainer.querySelector(".step-images");
    const stepNumber = step.step_number ?? (index + 1);

    const stepImages = images.filter(image => {
      const stepMatch = image.image_url.match(/step(\d+)_/);
      return stepMatch && parseInt(stepMatch[1]) === stepNumber;
    });

    if (stepImages.length > 0) {
      stepImages.forEach((image) => {
        const img = document.createElement("img");
        img.src = `../assets/image/recipes/${recipeId}/steps/${image.image_url}`;
        img.alt = `Step ${stepNumber} - Image ${image.image_id}`;
        img.style.width = "100px";
        img.style.height = "auto";
        img.style.borderRadius = "8px";
        img.style.objectFit = "cover";
        img.onerror = () => {
          console.log(`Failed to load image: ${img.src}`);
          img.src = "../assets/image/placeholder.png";
        };
        img.setAttribute("loading", "lazy");
        imagesContainer.appendChild(img);
      });
    } else {
      console.log(`No images for step ${stepNumber}`);
    }

    // Th√™m s·ª± ki·ªán cho checkbox
    const checkbox = stepContainer.querySelector("input[type='checkbox']");
    checkbox.addEventListener("change", () => {
      if (checkbox.checked && index === steps.length - 1) {
        modal.style.display = "flex"; // Hi·ªÉn th·ªã modal khi tick b∆∞·ªõc cu·ªëi
      }
    });

    container.appendChild(stepContainer);
  });
}

// G·ªçi h√†m v·ªõi recipe
displayInstructions(recipe);
// G·ªçi h√†m v·ªõi recipe
        // h√†m chuy·ªÉn ƒë·ªïi th·ªùi gian
        function formatTime(datetimeStr) {
          const date = new Date(datetimeStr);
          return date.toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });
        }

        function displayComment(comments) {
          const container = document.getElementById("comment-container");
          container.innerHTML = ""; // X√≥a to√†n b·ªô n·ªôi dung c≈© tr∆∞·ªõc khi th√™m m·ªõi

          comments.forEach(c => {
            // G√°n avatar m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
            const avatarUrl = c.avatar ? c.avatar : "https://i.pravatar.cc/100?img=12"; // ·∫¢nh ng·∫´u nhi√™n

            const html = `
                      <div class="flex w-full flex-row items-start justify-start gap-3 p-4">
                        <div
                          class="bg-center bg-no-repeat aspect-square bg-cover rounded-full w-10 shrink-0"
                          style='background-image: url("${avatarUrl}");'
                        ></div>
                        <div class="flex h-full flex-1 flex-col items-start justify-start">
                          <div class="flex w-full flex-row items-start justify-start gap-x-3">
                            <p class="text-[#1C160C] text-sm font-bold leading-normal tracking-[0.015em]">${c.name}</p>
                            <p class="text-[#A18249] text-sm font-normal leading-normal">${formatTime(c.created_at)}</p>
                          </div>
                          <p class="text-[#1C160C] text-sm font-normal leading-normal">${c.comment}</p>
                          <div class="flex w-full flex-row items-center justify-start gap-9 pt-2">
                            <div class="flex items-center gap-2">
                              <div class="text-[#A18249]" data-icon="ThumbsUp" data-size="20px" data-weight="regular">
                                <button class="like-btn text-[#A18249]" style="border: none; background: transparent; cursor: pointer;">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" fill="currentColor" viewBox="0 0 256 256">
                                    <path d="M234,80.12A24,24,0,0,0,216,72H160V56a40,40,0,0,0-40-40,8,8,0,0,0-7.16,4.42L75.06,96H32a16,16,0,0,0-16,16v88a16,16,0,0,0,16,16H204a24,24,0,0,0,23.82-21l12-96A24,24,0,0,0,234,80.12ZM32,112H72v88H32ZM223.94,97l-12,96a8,8,0,0,1-7.94,7H88V105.89l36.71-73.43A24,24,0,0,1,144,56V80a8,8,0,0,0,8,8h64a8,8,0,0,1,7.94,9Z"></path>
                                  </svg>
                                </button>
                              </div>
                              <p class="like-count text-[#A18249] text-sm font-normal leading-normal">0</p>
                            </div>
                            <div class="flex items-center gap-2">
                              <div class="text-[#A18249]" data-icon="ThumbsDown" data-size="20px" data-weight="regular">
                                <button class="dislike-btn text-[#A18249]" style="border: none; background: transparent; cursor: pointer;">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" fill="currentColor" viewBox="0 0 256 256">
                                    <path d="M239.82,157l-12-96A24,24,0,0,0,204,40H32A16,16,0,0,0,16,56v88a16,16,0,0,0,16,16H75.06l37.78,75.58A8,8,0,0,0,120,240a40,40,0,0,0,40-40V184h56a24,24,0,0,0,23.82-27ZM72,144H32V56H72Zm150,21.29a7.88,7.88,0,0,1-6,2.71H152a8,8,0,0,0-8,8v24a24,24,0,0,1-19.29,23.54L88,150.11V56H204a8,8,0,0,1,7.94,7l12,96A7.87,7.87,0,0,1,222,165.29Z"></path>
                                  </svg>
                                </button>
                              </div>
                              <p class="dislike-count text-[#A18249] text-sm font-normal leading-normal">0</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    `;
            container.insertAdjacentHTML("beforeend", html);
          });
        }
        displayComment(recipe.comments);

        document.getElementById("save-btn").addEventListener("click", async () => {
          try {
            const response = await fetch("http://localhost:4000/detailrecipe", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                user_id: parseInt(userId),
                recipe_id: parseInt(recipeId),
              }),
            });

            const result = await response.json();
            if (response.ok) {
              alert("ƒê√£ l∆∞u c√¥ng th·ª©c th√†nh c√¥ng!");

            } else {
              alert("L·ªói khi l∆∞u: " + result.message);
            }
          } catch (err) {
            console.error("L·ªói k·∫øt n·ªëi:", err);
            alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß.");
          }
        });

        document.getElementById('commentForm').addEventListener('submit', submitComment);
        document.getElementById('open-comment-form').addEventListener('click', toggleCommentForm);
        document.getElementById('cancelCommentBtn').addEventListener('click', toggleCommentForm);
        document.getElementById('report-recipe-btn').addEventListener('click', toggleReportModal);
        document.getElementById('reportForm').addEventListener('submit', submitReport);
        document.getElementById('cancelReportBtn').addEventListener('click', toggleReportModal);

        function toggleCommentForm() {
          const modal = document.getElementById('commentModal');
          if (modal.classList.contains('active')) {
            modal.classList.remove('active');
            setTimeout(() => { modal.style.display = 'none'; }, 300);
          } else {
            modal.style.display = 'flex';
            setTimeout(() => { modal.classList.add('active'); }, 10);
          }
          document.getElementById('message').textContent = '';
          document.getElementById('commentContent').value = '';
        }

        function toggleReportModal() {
          const modal = document.getElementById('reportModal');
          const messageEl = document.getElementById('reportMessage');

          if (modal.style.display === 'flex') {
             modal.classList.remove('active');
             setTimeout(() => { modal.style.display = 'none'; }, 300);
          } else {
            modal.style.display = 'flex';
            setTimeout(() => { modal.classList.add('active'); }, 10);
          }
          if(messageEl) messageEl.textContent = '';
          document.getElementById('reportReason').value = '';
        }

        async function submitReport(event) {
            event.preventDefault();
            const reason = document.getElementById('reportReason').value.trim();
            const messageEl = document.getElementById('reportMessage');

            if (!reason) {
                messageEl.textContent = 'Please enter your reason for reporting!';
                messageEl.style.color = 'red';
                return;
            }
            if (isNaN(recipeId) || isNaN(userId)) { // Ki·ªÉm tra l·∫°i c√°c bi·∫øn global
                messageEl.textContent = 'Recipe ID or User ID is invalid!';
                messageEl.style.color = 'red';
                return;
            }

            try {
                const response = await fetch('http://localhost:4000/reports/recipe', { // Endpoint m·ªõi cho report
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        recipe_id: parseInt(recipeId, 10), // S·ª≠ d·ª•ng recipeId global
                        user_id: parseInt(userId, 10),   // S·ª≠ d·ª•ng userId global
                        reason: reason
                    }),
                });
                
                const result = await response.json();

                if (response.ok) {
                    messageEl.style.color = 'green';
                    messageEl.textContent = 'Report submitted successfully!';
                    document.getElementById('reportReason').value = '';
                    setTimeout(toggleReportModal, 1500); 
                } else {
                    messageEl.style.color = 'red';
                    messageEl.textContent = result.message || 'Failed to submit report. Please try again.';
                }
            } catch (error) {
                console.error("Connection error:", error);
                messageEl.style.color = 'red';
                messageEl.textContent = 'Connection error, please try again!';
            }
        }

        async function submitComment(event) {
          // Truy·ªÅn v√†o user_id v√† recipe id
          // truy·ªÅn v√†o tham s·ªë 

          // Chuy·ªÉn recipeId v√† userId th√†nh integer (n·∫øu c·∫ßn thi·∫øt)
          const recipeIdInt = parseInt(recipeId, 10);
          const userIdInt = parseInt(userId, 10);

          event.preventDefault();
          const content = document.getElementById('commentContent').value.trim();
          const messageEl = document.getElementById('message');
          if (!content) {
            messageEl.textContent = 'Please enter your comment!';
            return;
          }
          if (isNaN(recipeId) || isNaN(recipeId)) {
            messageEl.textContent = 'recipe_id ho·∫∑c user_id kh√¥ng h·ª£p l·ªá!';
            return;
          }
          try {
            const response = await fetch('http://localhost:4000/detailrecipe/comments', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                content: content,
                recipe_id: recipeIdInt,
                user_id: userIdInt
              }),
            });
            console.log(response);

            if (response.ok) {
              const commentObject = await response.json(); // üü† Quan tr·ªçng!
              console.log(commentObject);
              const container = document.getElementById("comment-container");

              messageEl.style.color = 'orange';
              messageEl.textContent = 'Your comment has been sent!';
              document.getElementById('commentContent').value = '';
              setTimeout(toggleCommentForm, 1000);

              fetchAndDisplayRecipe(recipeId, userId);

            } else {
              const errorData = await response.json();
              messageEl.textContent = errorData.error || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!';
            }
          } catch (error) {
            console.error("L·ªói k·∫øt n·ªëi:", error); // Log chi ti·∫øt ra console
            messageEl.textContent = 'L·ªói k·∫øt n·ªëi, vui l√≤ng th·ª≠ l·∫°i!';
          }


        }


      } catch (err) {
        console.error("‚ùå L·ªói khi hi·ªÉn th·ªã chi ti·∫øt m√≥n ƒÉn:", err);
        alert("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt c√¥ng th·ª©c.");
      }
    }
    // truy·ªÅn recipe id v√†o ƒë·ªÉ hi·ªÉn th·ªã c√¥ng th·ª©c
    fetchAndDisplayRecipe(recipeId, userId);

  </script>

</body>

</html>